package org.devnull.matchmaking.player;

//import static org.devnull.matchmaking.CommonMacros.*;

import org.devnull.matchmaking.Player;

public class RemotePlayer implements Player, java.io.Serializable {

    /** Generated by the serialver utility */
    //TODO: private static final long serialVersionUID = 6767373972869040494L;

    //public static final PlayerProperties<RemotePlayer> PLAYER_PROPERTIES = pps(
    //    null
    //);

    private static Player load(final String name) {
        try {
            // Sleep 1000 milliseconds = 1 second
            Thread.sleep(1000);
        } catch (final InterruptedException e) {
            return null;
        }
        // TODO: Should load from Sample Data if there is spare time
        final java.util.Random r = new java.util.Random();
        int wins = 0;
        int losses = 0;
        do {
            wins = r.nextInt();
        } while (wins < 0);
        do {
            losses = r.nextInt();
        } while (losses < 0);
        return new BasicPlayer(name, wins, losses);
    }



	private final String name;
	private volatile transient boolean isLoaded;
    private transient Player player;

    public RemotePlayer(final String name) {
    	this.name = name;
    }

    //@Override
    //public PlayerProperties<Player> getPlayerProperty() {
    //    return null;
    //}

	@Override
	public Player getRealPlayer() {
		return this.getPlayer().getRealPlayer();
	}

	@Override
	public String getName() {
		return this.name;
	}

	@Override
	public int getWins() {
		return this.getPlayer().getWins();
	}

	@Override
	public int getLosses() {
		return this.getPlayer().getLosses();
	}

	public Player getPlayer() {
		if (!this.isLoaded) {
			final Player player = load(this.name);
			if (this.player == null) {
				this.player = player;
				this.isLoaded = true;
			}
		}
		return this.player;
	}



    @Override
    public int hashCode() {
        // The same as java.util.Objects#hash(Object...)
        return (1 * 31) + this.name.hashCode();
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == null) return false;
        if (obj == this) return true;
        // Note: Do NOT use "instanceof" here
        // Java equality sucks, let's use Scala!
        // See: http://stackoverflow.com/q/12239344/142239
        if (obj.getClass() != RemotePlayer.class) return false;
        final RemotePlayer p = (RemotePlayer) obj;
        return this.getName().equals(p.getName());
    }

    @Override
    public String toString() {
        // TODO: Should use Apache Commons StringEscapeUtils to escape this.name here,
        //       but let's assume there are no special characters for simplicity.
        return new StringBuilder("[RemotePlayer: \"name\": \"")
            .append(this.name)
            .append("]")
            .toString();
    }

}
